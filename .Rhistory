"-o", path2MagOutput,
"-q", path2MagOutput2,
"-s", path2MagOutput3,
"-b", as.integer(return_aff_mat),
"-c", n_diffusion_components,
"-p", pca,
"-t", t_init,
"-k", k,
"-ka", ka,
"-e", epsilon,
"-r", rescale,
"-n")
if(!is.null(aff_mat_input)) {
path2MagInputAffMat <- tempfile("magicAffMatInput", fileext = ".csv")
data.table::fwrite(as.data.frame(aff_mat_input), file = path2MagInputAffMat, row.names = TRUE)
magParams <- paste(magParams, "-a", path2MagInputAffMat)
to.remove <- c(to.remove, path2MagInputAffMat)
}
message("running MAGIC algorithm")
output <- system2(python_command, args= paste(path2MagScript, magParams, "csv"), stdout=TRUE)
print(paste(output))
imputed_data <- as.matrix(data.table::fread(path2MagOutput, header = TRUE)[,-1])
dimnames(imputed_data) <- dimnames(data)
if(n_diffusion_components != 0) {
diffusion_map <- as.matrix(data.table::fread(path2MagOutput2, header = TRUE)[,-1])
rownames(diffusion_map) <- rownames(data)
} else {
diffusion_map <- NULL
}
if(return_aff_mat) {
affinity_matrix <- as.matrix(data.table::fread(path2MagOutput3, header = TRUE)[,-1])
dimnames(affinity_matrix) <- list(rownames(data), rownames(data))
} else {
affinity_matrix <- NULL
}
length(t) > 1
t <- c(2,4,6)
if(length(t) > 1) {
t <- t[order(t)]
t_init <- t[length(t)]
return_aff_mat <- TRUE
} else {
t_init <- t
}
on.exit({print(paste("removing temporary files"))
file.remove(to.remove)
print(paste("done") )})
message("exporting data to python")
path2MagScript <- system.file("exec", "MAGIC.py", package="magicBatch")
path2MagInputData <- tempfile("magicData", fileext = ".csv")
data.table::fwrite(as.data.frame(data), file = path2MagInputData, row.names = FALSE)
path2MagOutput <- tempfile("magicOut", fileext = ".csv")
path2MagOutput2 <- tempfile("magicOut2", fileext = ".csv")
path2MagOutput3 <- tempfile("magicOut3", fileext = ".csv")
to.remove <- c(path2MagInputData, path2MagOutput, path2MagOutput2, path2MagOutput3)
magParams <- paste("-d", path2MagInputData,
"-o", path2MagOutput,
"-q", path2MagOutput2,
"-s", path2MagOutput3,
"-b", as.integer(return_aff_mat),
"-c", n_diffusion_components,
"-p", pca,
"-t", t_init,
"-k", k,
"-ka", ka,
"-e", epsilon,
"-r", rescale,
"-n")
if(!is.null(aff_mat_input)) {
path2MagInputAffMat <- tempfile("magicAffMatInput", fileext = ".csv")
data.table::fwrite(as.data.frame(aff_mat_input), file = path2MagInputAffMat, row.names = TRUE)
magParams <- paste(magParams, "-a", path2MagInputAffMat)
to.remove <- c(to.remove, path2MagInputAffMat)
}
message("running MAGIC algorithm")
output <- system2(python_command, args= paste(path2MagScript, magParams, "csv"), stdout=TRUE)
print(paste(output))
imputed_data <- as.matrix(data.table::fread(path2MagOutput, header = TRUE)[,-1])
dimnames(imputed_data) <- dimnames(data)
if(n_diffusion_components != 0) {
diffusion_map <- as.matrix(data.table::fread(path2MagOutput2, header = TRUE)[,-1])
rownames(diffusion_map) <- rownames(data)
} else {
diffusion_map <- NULL
}
if(return_aff_mat) {
affinity_matrix <- as.matrix(data.table::fread(path2MagOutput3, header = TRUE)[,-1])
dimnames(affinity_matrix) <- list(rownames(data), rownames(data))
} else {
affinity_matrix <- NULL
}
length(t) > 1
t_sub <- t[-length(t)]
aff.mat <- as(affinity_matrix, "dgCMatrix")
data <- as(as.matrix(t(data)), "dgCMatrix")
additional_t <- lapply(t_sub, function(add_t) {
as.matrix(tcrossprod(Reduce("%*%", replicate(add_t, aff.mat)), data))
})
?replicate
?Reduce
imputed_data <- c(list(imputed_data), additional_t)
names(imputed_data) <- paste0("t", t)
remove.packages("magicBatch")
devtools::install("~/git/magic2")
mag_res <- magicBatch::magicBatch(test_data2, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
anyNA(test_data2)
test_data2
test_data2$Brd2
test_data2$Arf6
mag_res <- magicBatch::magicBatch(test_data2, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
?as
remove.packages("magicBatch")
devtools::install("~/git/magic2")
mag_res <- magicBatch::magicBatch(test_data2, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
test <-     as.matrix(tcrossprod(Reduce("%*%", replicate(add_t, aff.mat)), data))
?Reduce
?%*%
remove.packages("magicBatch")
devtools::install("~/git/magic2")
mag_res <- magicBatch::magicBatch(test_data2, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
t_sub <- t[-length(t)]
aff.mat <- methods::as(affinity_matrix, "dgCMatrix")
data <- methods::as(as.matrix(t(data)), "dgCMatrix")
additional_t <- lapply(t_sub, function(add_t) {
as.matrix(tcrossprod(Reduce("%*%", replicate(add_t, aff.mat)), data))
})
imputed_data <- c(list(imputed_data), additional_t)
names(imputed_data) <- paste0("t", t)
t_sub <- t[-length(t)]
aff.mat <- methods::as(affinity_matrix, "dgCMatrix")
data <- methods::as(as.matrix(t(data)), "dgCMatrix")
additional_t <- lapply(t_sub, function(add_t) {
as.matrix(tcrossprod(Reduce("%*%", replicate(add_t, aff.mat)), data))
})
imputed_data <- c(list(imputed_data), additional_t)
names(imputed_data) <- paste0("t", t)
class(mag_res$affinity_matrix[1,])
class(mag_res$affinity_matrix[,1])
mag_res$affinity_matrix[,1]
mag_res$affinity_matrix[,2]
t
if(length(t) > 1) {
t <- t[order(t)]
t_init <- t[length(t)]
return_aff_mat <- TRUE
} else {
t_init <- t
}
on.exit({print(paste("removing temporary files"))
file.remove(to.remove)
print(paste("done") )})
message("exporting data to python")
path2MagScript <- system.file("exec", "MAGIC.py", package="magicBatch")
path2MagInputData <- tempfile("magicData", fileext = ".csv")
data.table::fwrite(as.data.frame(data), file = path2MagInputData, row.names = FALSE)
path2MagOutput <- tempfile("magicOut", fileext = ".csv")
path2MagOutput2 <- tempfile("magicOut2", fileext = ".csv")
path2MagOutput3 <- tempfile("magicOut3", fileext = ".csv")
to.remove <- c(path2MagInputData, path2MagOutput, path2MagOutput2, path2MagOutput3)
magParams <- paste("-d", path2MagInputData,
"-o", path2MagOutput,
"-q", path2MagOutput2,
"-s", path2MagOutput3,
"-b", as.integer(return_aff_mat),
"-c", n_diffusion_components,
"-p", pca,
"-t", t_init,
"-k", k,
"-ka", ka,
"-e", epsilon,
"-r", rescale,
"-n")
if(!is.null(aff_mat_input)) {
path2MagInputAffMat <- tempfile("magicAffMatInput", fileext = ".csv")
data.table::fwrite(as.data.frame(aff_mat_input), file = path2MagInputAffMat, row.names = TRUE)
magParams <- paste(magParams, "-a", path2MagInputAffMat)
to.remove <- c(to.remove, path2MagInputAffMat)
}
message("running MAGIC algorithm")
output <- system2(python_command, args= paste(path2MagScript, magParams, "csv"), stdout=TRUE)
print(paste(output))
imputed_data <- as.matrix(data.table::fread(path2MagOutput, header = TRUE)[,-1])
dimnames(imputed_data) <- dimnames(data)
if(n_diffusion_components != 0) {
diffusion_map <- as.matrix(data.table::fread(path2MagOutput2, header = TRUE)[,-1])
rownames(diffusion_map) <- rownames(data)
} else {
diffusion_map <- NULL
}
if(return_aff_mat) {
affinity_matrix <- as.matrix(data.table::fread(path2MagOutput3, header = TRUE)[,-1])
dimnames(affinity_matrix) <- list(rownames(data), rownames(data))
} else {
affinity_matrix <- NULL
}
data <- test_data2
if(length(t) > 1) {
t <- t[order(t)]
t_init <- t[length(t)]
return_aff_mat <- TRUE
} else {
t_init <- t
}
on.exit({print(paste("removing temporary files"))
file.remove(to.remove)
print(paste("done") )})
message("exporting data to python")
path2MagScript <- system.file("exec", "MAGIC.py", package="magicBatch")
path2MagInputData <- tempfile("magicData", fileext = ".csv")
data.table::fwrite(as.data.frame(data), file = path2MagInputData, row.names = FALSE)
path2MagOutput <- tempfile("magicOut", fileext = ".csv")
path2MagOutput2 <- tempfile("magicOut2", fileext = ".csv")
path2MagOutput3 <- tempfile("magicOut3", fileext = ".csv")
to.remove <- c(path2MagInputData, path2MagOutput, path2MagOutput2, path2MagOutput3)
magParams <- paste("-d", path2MagInputData,
"-o", path2MagOutput,
"-q", path2MagOutput2,
"-s", path2MagOutput3,
"-b", as.integer(return_aff_mat),
"-c", n_diffusion_components,
"-p", pca,
"-t", t_init,
"-k", k,
"-ka", ka,
"-e", epsilon,
"-r", rescale,
"-n")
if(!is.null(aff_mat_input)) {
path2MagInputAffMat <- tempfile("magicAffMatInput", fileext = ".csv")
data.table::fwrite(as.data.frame(aff_mat_input), file = path2MagInputAffMat, row.names = TRUE)
magParams <- paste(magParams, "-a", path2MagInputAffMat)
to.remove <- c(to.remove, path2MagInputAffMat)
}
message("running MAGIC algorithm")
output <- system2(python_command, args= paste(path2MagScript, magParams, "csv"), stdout=TRUE)
print(paste(output))
imputed_data <- as.matrix(data.table::fread(path2MagOutput, header = TRUE)[,-1])
dimnames(imputed_data) <- dimnames(data)
if(n_diffusion_components != 0) {
diffusion_map <- as.matrix(data.table::fread(path2MagOutput2, header = TRUE)[,-1])
rownames(diffusion_map) <- rownames(data)
} else {
diffusion_map <- NULL
}
if(return_aff_mat) {
affinity_matrix <- as.matrix(data.table::fread(path2MagOutput3, header = TRUE)[,-1])
dimnames(affinity_matrix) <- list(rownames(data), rownames(data))
} else {
affinity_matrix <- NULL
}
affinity_matrix[,1]
affinity_matrix[,2]
t_sub <- t[-length(t)]
aff.mat <- as(affinity_matrix, "dgCMatrix")
data <- as(as.matrix(t(data)), "dgCMatrix")
additional_t <- lapply(t_sub, function(add_t) {
as.matrix(tcrossprod(Reduce("%*%", replicate(add_t, aff.mat)), data))
})
imputed_data <- c(list(imputed_data), additional_t)
names(imputed_data) <- paste0("t", t)
nnames(affinity_matrix[,1])
names(affinity_matrix[,1])
affinity_matrix2 <- unname(affinity_matrix)
affinity_matrix2[,1]
remove.packages("magicBatch")
devtools::install("~/git/magic2")
mag_res <- magicBatch::magicBatch(test_data2, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
magicBatch <- function(data,
aff_mat_input = NULL,
pca = 20,
t = 2,
n_diffusion_components = 10,
k = 9,
ka = 3,
epsilon = 1,
rescale = 0,
return_aff_mat = TRUE,
python_command = "python3") {
if(length(t) > 1) {
t <- t[order(t)]
t_init <- t[length(t)]
return_aff_mat <- TRUE
} else {
t_init <- t
}
on.exit({print(paste("removing temporary files"))
file.remove(to.remove)
print(paste("done") )})
message("exporting data to python")
path2MagScript <- system.file("exec", "MAGIC.py", package="magicBatch")
path2MagInputData <- tempfile("magicData", fileext = ".csv")
data.table::fwrite(as.data.frame(data), file = path2MagInputData, row.names = FALSE)
path2MagOutput <- tempfile("magicOut", fileext = ".csv")
path2MagOutput2 <- tempfile("magicOut2", fileext = ".csv")
path2MagOutput3 <- tempfile("magicOut3", fileext = ".csv")
to.remove <- c(path2MagInputData, path2MagOutput, path2MagOutput2, path2MagOutput3)
magParams <- paste("-d", path2MagInputData,
"-o", path2MagOutput,
"-q", path2MagOutput2,
"-s", path2MagOutput3,
"-b", as.integer(return_aff_mat),
"-c", n_diffusion_components,
"-p", pca,
"-t", t_init,
"-k", k,
"-ka", ka,
"-e", epsilon,
"-r", rescale,
"-n")
if(!is.null(aff_mat_input)) {
path2MagInputAffMat <- tempfile("magicAffMatInput", fileext = ".csv")
data.table::fwrite(as.data.frame(aff_mat_input), file = path2MagInputAffMat, row.names = TRUE)
magParams <- paste(magParams, "-a", path2MagInputAffMat)
to.remove <- c(to.remove, path2MagInputAffMat)
}
message("running MAGIC algorithm")
output <- system2(python_command, args= paste(path2MagScript, magParams, "csv"), stdout=TRUE)
print(paste(output))
imputed_data <- as.matrix(data.table::fread(path2MagOutput, header = TRUE)[,-1])
dimnames(imputed_data) <- dimnames(data)
if(n_diffusion_components != 0) {
diffusion_map <- as.matrix(data.table::fread(path2MagOutput2, header = TRUE)[,-1])
rownames(diffusion_map) <- rownames(data)
} else {
diffusion_map <- NULL
}
if(return_aff_mat) {
affinity_matrix <- unname(as.matrix(data.table::fread(path2MagOutput3, header = TRUE)[,-1]))
dimnames(affinity_matrix) <- list(rownames(data), rownames(data))
} else {
affinity_matrix <- NULL
}
if(length(t) > 1) {
t_sub <- t[-length(t)]
aff.mat <- as(affinity_matrix, "dgCMatrix")
data <- as(as.matrix(t(data)), "dgCMatrix")
additional_t <- lapply(t_sub, function(add_t) {
as.matrix(tcrossprod(Reduce("%*%", replicate(add_t, aff.mat)), data))
})
imputed_data <- c(list(imputed_data), additional_t)
names(imputed_data) <- paste0("t", t)
}
return(list(imputed_data = imputed_data,
diffusion_map = diffusion_map,
affinity_matrix = affinity_matrix))
}
start <- Sys.time()
mag_res <- magicBatch(test_data2, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
dim(test_data)
start <- Sys.time()
mag_res <- magicBatch(test_data2, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
dim(test_data)
start <- Sys.time()
mag_res <- magicBatch(test_data2, t= c(2, 4, 6, 8), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
dim(test_data)
start <- Sys.time()
mag_res <- magicBatch(test_data2, t= c(2), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
dim(test_data)
start <- Sys.time()
mag_res <- magicBatch(test_data, t= c(2, 4, 6), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
additional_t <- lapply(t_sub, function(add_t) {
as.matrix(tcrossprod(Reduce(`%*%`, replicate(add_t, aff.mat)), data))
})
remove.packages("magicBatch")
devtools::install("~/git/magic2")
start <- Sys.time()
mag_res <- magicBatch(test_data, t= c(2, 4), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
start <- Sys.time()
res <- Map(function(x) {
magic_old <- import("magic", convert = F)
magic.data <- magic_old$mg$SCData(test_data)
magic.data$run_magic(n_pca_components = 12L,
t = 2L,
k = 9L,
ka = 3L,
epsilon = 1,
rescale_percent = 99)
magic.data <- py_to_r(magic.data$magic$data)
colnames(magic.data) <- gsub("MAGIC ", "", colnames(magic.data))
magic.data
}, c(2,4))
end <- Sys.time()
print("reticulate")
end - start
start <- Sys.time()
mag_res <- magicBatch(test_data2, t= c(2, 4, 6), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
start <- Sys.time()
res <- Map(function(x) {
magic_old <- import("magic", convert = F)
magic.data <- magic_old$mg$SCData(test_data2)
magic.data$run_magic(n_pca_components = 12L,
t = 2L,
k = 9L,
ka = 3L,
epsilon = 1,
rescale_percent = 99)
magic.data <- py_to_r(magic.data$magic$data)
colnames(magic.data) <- gsub("MAGIC ", "", colnames(magic.data))
magic.data
}, c(2, 4, 6))
end <- Sys.time()
print("reticulate")
end - start
start <- Sys.time()
mag_res <- magicBatch(test_data2, t= c(2), n_diffusion_components = 0, return_aff_mat = 1, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
start <- Sys.time()
mag_res <- magicBatch(test_data2, t= c(2), n_diffusion_components = 0, return_aff_mat = FALSE, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
start <- Sys.time()
res <- Map(function(x) {
magic_old <- import("magic", convert = F)
magic.data <- magic_old$mg$SCData(test_data2)
magic.data$run_magic(n_pca_components = 12L,
t = 2L,
k = 9L,
ka = 3L,
epsilon = 1,
rescale_percent = 99)
magic.data <- py_to_r(magic.data$magic$data)
colnames(magic.data) <- gsub("MAGIC ", "", colnames(magic.data))
magic.data
}, c(2))
end <- Sys.time()
print("reticulate")
end - start
start <- Sys.time()
res <- Map(function(x) {
magic_old <- import("magic", convert = F)
magic.data <- magic_old$mg$SCData(test_data2)
magic.data$run_magic(n_pca_components = 12L,
t = 2L,
k = 9L,
ka = 3L,
epsilon = 1,
rescale_percent = 99)
magic.data <- py_to_r(magic.data$magic$data)
colnames(magic.data) <- gsub("MAGIC ", "", colnames(magic.data))
magic.data
}, c(2))
end <- Sys.time()
print("reticulate")
end - start
?gsub
test <- c("MAGIC t2", "MAGIC t4")
sub("MAGIC ", "", test)
start <- Sys.time()
mag_res <- magicBatch(test_data, t= c(2), n_diffusion_components = 0, return_aff_mat = FALSE, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
test_data2 <- as.data.frame(test_data2)
start <- Sys.time()
res <- Map(function(x) {
magic_old <- import("magic", convert = F)
magic.data <- magic_old$mg$SCData(test_data)
magic.data$run_magic(n_pca_components = 12L,
t = 2L,
k = 9L,
ka = 3L,
epsilon = 1,
rescale_percent = 99)
magic.data <- py_to_r(magic.data$magic$data)
colnames(magic.data) <- gsub("MAGIC ", "", colnames(magic.data))
magic.data
}, c(2))
end <- Sys.time()
print("reticulate")
end - start
?Matrix::readMM
remove.packages("magicBatch")
devtools::install("~/git/magic2")
devtools::install("~/git/magic2")
start <- Sys.time()
mag_res <- magicBatch(test_data, t= c(2), n_diffusion_components = 0, return_aff_mat = FALSE, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
start <- Sys.time()
mag_res <- magicBatch::magicBatch(test_data2, t= c(2), n_diffusion_components = 0, return_aff_mat = FALSE, python_command = "/usr/local/bin/python3")
end <- Sys.time()
print("magicBatch")
end - start
remove.packages("magicBatch")
devtools::install("~/git/magic2")
getwd()
devtools::install("~/git/magic2")
devtools::install("~/git/magic2")
q()
